//AVANT DE COMMENCER LE PROJET

> Dans le terminal : - npm init => pour générer le package.json,
                   - npm install express => pour générer le fichier "node_modules" + 
                     définir "express" dans "app.js"

> Installer Robo 3T (une des interfaces qui fait le lien avec mongoDB).

//PROJET

- Définir la route.
- Définir le port.
- Installer handlebars, voir site officiel + le définir dans "app.js".

- Création du dossier "partials", celui-ci est à mettre dans le dossier "views".
- Pour les images voir "express.static" + création dossier "Public".

- Installer ENV pour la sécurité => "npm i dotenv" et le définir dans "app.js" en le liant avec Mongoose =>
  process.env.MONGO_URI + le définir également dans "console.js"

<! ------------------------------------------------------ >

//FONCTIONNEMENT DE MongoDB 

- Installer MongoDB => Voir site officiel ! NE PAS OUBLIER DE CREER LE DOSSIER "/data/db" 
  à la racine, ex sous linux, il se retrouve dans "système de fichiers".

- Pour démarrer MongoDB => faire "mongo" dans le terminal.

** Dans le terminal, "show dbs" => Montre les bases de données qui figurent dans MongoDB.**

- Pour créer une base de données à partir du terminal on met "use (+ nom choisi pour la base de données).
- Pour savoir dans quelle base de données on se trouve, sur le terminal écrire "db" uniquement.
- "use" peut servir aussi à changer de base de données ex use + le nom de la base de données où l'on veut travailler.

=> On peut créer le contenu de notre base de données directement avec le ternimal, voir :https://docs.mongodb.com/manual/crud/.
>> ne pas oublier de mettre l'ID ex: > db.products.insertOne({_id:1, name:"thé vert", price:9, stock:10})
   sinon il met un ID par défaut complexe à retenir.
** Tjs dans le terminal, "show collections" montre le nom de la collection que l'on a créé.**

- Pour voir les documents qui sont dans notre collection : "db.collection.find()", remplacer "collection" par 
  le nom de notre collection, ici "products", le ".find()" affiche tous les éléments se trouvant dans la collection.

- Pour ajouter une valeur dans la data base par le terminal, ex: db.products.updateOne({_id: 1}, {$set : { bio: true } } ).
- Pour supprimer un document => db.products.deleteOne({ _id: ObjectId("5f6cb21e0485a4ff1078477c   })


//MONGOOSE

=> Sorte de passerelle qui sert à communiquer entre nodejs et mongoDB.

- Installer Mongoose => Voir documentation officielle + le définir dans "app.js".
- Créer un dossier database dans l'architecture nodejs + un second dossier "models" dans "database".
  Mongoose fonctionne avec des modeles. + créer un fichier "article.js" dans le dossier "models".

- Importer mongoose dans le fichier "article.js", pour le faire fonctionner + créer un schema : https://mongoosejs.com/docs/index.html

- Faire fonctionner mongoose avec la base de données voir "apptest.js".
=> Afficher cette nouvelle base de données récement créée dans le terminal avec nodemon apptest.js et "show dbs".
+ "show collections" pour voir le nom de notre document, ici, "article" (mongoDB fait passer les valeurs aux pluriel, donc c'est normal).
+ db.articles.find() pour tout afficher.

//bodyParser, il est utilisé pour parser une page, il peut aussi afficher un modal.
//aussi, le mentionner dans le html "add.hbs" voir ligne 5.

<!---------------------------------------------->

//AJOUTER UN ARTICLE

- Créer dans "views" un dossier "articles + nouveau fichier "add.handlebars"
** Dans l'excerce c'est le framwork Bulma qui est utilisé**

- Installer le BodyParser, voir documentation => https://www.npmjs.com/package/body-parser
- Rajouter du contenu via le document créé précedement "article.js" en lien avec "add.hbs" : http://localhost:3000/articles/add.
  (titre + contenu + enregister), voir dans la database, MongoDB si cela a bien fonctionné = > show dbs + use blog + db.articles.find().

** handlebars + express-handlebars versions :
- npm i -D handlebars@4.5.0
- npm i express-handlebars@3.1.0 **

- Pour formater la date installer : https://www.npmjs.com/package/handlebars.moment

//AJOUTER UNE IMAGES 

- Installer : https://www.npmjs.com/package/express-fileupload => Permet d'envoyer des fichiers avec express.
- Créer un dossier dans  "Public", pour que l'image soit en statique, ici, "articles".

**Installer le middleware**

//CONTROLLERS 

- Créer un dosier "controllers" + des fichier "articleAdd.js" etc...
- définir les controllers dans "app.js"

- Créer un nouveau dossier "middleware"

//ENREGISTER UN UTILISATEUR

- Créer un fichier dans "views", ici, "register.hbs".
- Définir dans les controllers "userCreate.js".
- Rajouter "user.js" dans le fichier "models" du dossier "database".


//CRYPTER UN MOT DE PASSE + UTILISATEUR

- On utilise le middleware => Voir "user.js"
- Ne pas oublier d'installer becrypt => https://www.npmjs.com/package/bcrypt

//Créer une page de connexion

- voir "login.hbs" + "userLogin"

L'utilistion doit s'inscrire pour pouvoir éditer un document dans le site, à sa connexion, lui 
est attribué un id via la base de données.
=> Pour qu'un utilisateur puisse éditer un article : mpn i express-session 

- Installer "npm i connect-mongo" => Permet d'enregister une session d'un utilisateur dans la base de données.

**Bouton SE DECONNECTER/LOGOUT**
- Pocéder à la supression de l'id dans le terminal => db.sessions.deleteOne({_id: "le numéro de l'id"})
=> Le fait d'éffacer le cookies, correspondant à l'id se trouvant dans la base de données permet l'action 
de la déconnection.

//AFFICHER LES MESSAGES D'ERREUR
- Avec la méthode Object.keys() : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/keys, 
  voir "userRegister.js" + "register.hbs".

